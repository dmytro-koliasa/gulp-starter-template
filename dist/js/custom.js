document.addEventListener("DOMContentLoaded",(()=>{})),window.onload=()=>{$(".js-slider").each(((e,s)=>{const t=$(s).closest(".js-slider-wrapper").find(".js-arrow-count");$(s).on("init reInit afterChange",(function(e,s,i,n){const o=`<div class="slider__current">${parseInt(s.currentSlide+1)}</div>/${s.slideCount}`;t.html(o)}));let i=$(s).closest(".js-slider-wrapper").find(".js-arrow-prev"),n=$(s).closest(".js-slider-wrapper").find(".js-arrow-next");$(s).slick({slidesToShow:2,slidesToScroll:1,responsive:[{breakpoint:768,settings:{slidesToShow:1}},{breakpoint:480,settings:{slidesToShow:1}}],nextArrow:n,prevArrow:i})})),$(".js-image-gallery").each((function(){var e=[],s=$(this);s.find(".slick-slide:not(.slick-cloned)").find(".js-image-gallery-link").each((function(){e.push($(this).attr("href"))}));var t=[];$.each(e,(function(e,s){-1===$.inArray(s,t)&&t.push(s)})),e=[],$.each(t,(function(s,t){e.push({src:t,type:"image"})})),s.find(".js-image-gallery-link").each((function(){var s=$(this);$.each(e,(function(e,t){t.src!=s.attr("href")||s.data("index",e)}))})),s.on("click",".js-image-gallery-link",(function(s){s.preventDefault();var t=$(this);$.magnificPopup.open({type:"image",items:e,gallery:{enabled:!0}}),$.magnificPopup.instance.goTo(t.data("index"))}))}))},$(document).ready((()=>{$(".js-mask").inputmask({mask:"99-99-99-99"});const e=document.querySelectorAll(".js-popup-open"),s=document.querySelectorAll(".js-popup-close");e.forEach((e=>{e.addEventListener("click",(e=>{document.querySelector(".js-popup").classList.add("active"),document.body.classList.add("withPopup")}))})),s.forEach((e=>{e.addEventListener("click",(e=>{document.querySelector(".js-popup").classList.remove("active"),document.body.classList.remove("withPopup")}))})),window.onscroll=function(){window.pageYOffset>90?t.classList.add("sticky"):t.classList.remove("sticky")};var t=document.querySelector(".js-sticky");t.offsetTop}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
